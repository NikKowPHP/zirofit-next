This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
prisma/
  migrations/
    20250607060514_initial_schema/
      migration.sql
    migration_lock.toml
  schema.prisma
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    globals.css
    layout.tsx
    page.tsx
  lib/
    prisma.ts
.gitignore
babel.test.babelrc
docker-compose.mac.prod.yml
docker-compose.mac.yml
docker-compose.proxy.prod.yml
docker-compose.proxy.yml
Dockerfile.mac
Dockerfile.proxy
eslint.config.mjs
jest.setup.mjs
next.config copy.ts
next.config.ts
package.json
postcss.config.mjs
README.md
todo.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="prisma/migrations/20250607060514_initial_schema/migration.sql">
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "supabaseAuthUserId" TEXT,
    "name" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "username" TEXT,
    "role" TEXT NOT NULL DEFAULT 'trainer',
    "emailVerifiedAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Profile" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "certifications" TEXT,
    "location" TEXT,
    "phone" TEXT,
    "aboutMe" TEXT,
    "philosophy" TEXT,
    "methodology" TEXT,
    "bannerImagePath" TEXT,
    "profilePhotoPath" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Profile_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Service" (
    "id" TEXT NOT NULL,
    "profileId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Service_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Testimonial" (
    "id" TEXT NOT NULL,
    "profileId" TEXT NOT NULL,
    "clientName" TEXT NOT NULL,
    "testimonialText" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Testimonial_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "TransformationPhoto" (
    "id" TEXT NOT NULL,
    "profileId" TEXT NOT NULL,
    "imagePath" TEXT NOT NULL,
    "caption" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "TransformationPhoto_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ExternalLink" (
    "id" TEXT NOT NULL,
    "profileId" TEXT NOT NULL,
    "linkUrl" TEXT NOT NULL,
    "label" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ExternalLink_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Benefit" (
    "id" TEXT NOT NULL,
    "profileId" TEXT NOT NULL,
    "iconName" TEXT,
    "iconStyle" TEXT DEFAULT 'outline',
    "title" TEXT NOT NULL,
    "description" TEXT,
    "orderColumn" INTEGER NOT NULL DEFAULT 0,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Benefit_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Client" (
    "id" TEXT NOT NULL,
    "trainerId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "email" TEXT,
    "phone" TEXT,
    "status" TEXT NOT NULL DEFAULT 'active',
    "dateOfBirth" DATE,
    "goals" TEXT,
    "healthNotes" TEXT,
    "emergencyContactName" TEXT,
    "emergencyContactPhone" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Client_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ClientMeasurement" (
    "id" TEXT NOT NULL,
    "clientId" TEXT NOT NULL,
    "measurementDate" DATE NOT NULL,
    "weightKg" DOUBLE PRECISION,
    "bodyFatPercentage" DOUBLE PRECISION,
    "notes" TEXT,
    "customMetrics" JSONB,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ClientMeasurement_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ClientProgressPhoto" (
    "id" TEXT NOT NULL,
    "clientId" TEXT NOT NULL,
    "photoDate" DATE NOT NULL,
    "imagePath" TEXT NOT NULL,
    "caption" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ClientProgressPhoto_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ClientSessionLog" (
    "id" TEXT NOT NULL,
    "clientId" TEXT NOT NULL,
    "sessionDate" TIMESTAMP(3) NOT NULL,
    "durationMinutes" INTEGER,
    "activitySummary" TEXT,
    "sessionNotes" TEXT,
    "clientMoodFeedback" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ClientSessionLog_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_supabaseAuthUserId_key" ON "User"("supabaseAuthUserId");

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "User_username_key" ON "User"("username");

-- CreateIndex
CREATE UNIQUE INDEX "Profile_userId_key" ON "Profile"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "Client_trainerId_email_key" ON "Client"("trainerId", "email");

-- AddForeignKey
ALTER TABLE "Profile" ADD CONSTRAINT "Profile_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Service" ADD CONSTRAINT "Service_profileId_fkey" FOREIGN KEY ("profileId") REFERENCES "Profile"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Testimonial" ADD CONSTRAINT "Testimonial_profileId_fkey" FOREIGN KEY ("profileId") REFERENCES "Profile"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "TransformationPhoto" ADD CONSTRAINT "TransformationPhoto_profileId_fkey" FOREIGN KEY ("profileId") REFERENCES "Profile"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ExternalLink" ADD CONSTRAINT "ExternalLink_profileId_fkey" FOREIGN KEY ("profileId") REFERENCES "Profile"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Benefit" ADD CONSTRAINT "Benefit_profileId_fkey" FOREIGN KEY ("profileId") REFERENCES "Profile"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Client" ADD CONSTRAINT "Client_trainerId_fkey" FOREIGN KEY ("trainerId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ClientMeasurement" ADD CONSTRAINT "ClientMeasurement_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES "Client"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ClientProgressPhoto" ADD CONSTRAINT "ClientProgressPhoto_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES "Client"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "ClientSessionLog" ADD CONSTRAINT "ClientSessionLog_clientId_fkey" FOREIGN KEY ("clientId") REFERENCES "Client"("id") ON DELETE CASCADE ON UPDATE CASCADE;
</file>

<file path="prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm/6 text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2 tracking-[-.01em]">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-[family-name:var(--font-geist-mono)] font-semibold">
              src/app/page.tsx
            </code>
            .
          </li>
          <li className="tracking-[-.01em]">
            Save and see your changes instantly.
          </li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}
</file>

<file path="src/lib/prisma.ts">
// src/lib/prisma.ts
import { PrismaClient } from '@prisma/client';

declare global {
  // allow global `var` declarations
  // eslint-disable-next-line no-unused-vars
  var prisma: PrismaClient | undefined;
}

export const prisma =
  global.prisma ||
  new PrismaClient({
    // Optional: log: ['query', 'info', 'warn', 'error'],
  });

if (process.env.NODE_ENV !== 'production') global.prisma = prisma;

export default prisma;
</file>

<file path="babel.test.babelrc">
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react",
    "@babel/preset-typescript"
  ],
  "plugins": [
    ["module-resolver", {
      "root": ["./src"],
      "alias": {
        "@": "./src"
      }
    }]
  ]
}
</file>

<file path="docker-compose.mac.prod.yml">
version: '3.3'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.mac
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres.tdzryocudlllmufiiaki:KentHD720pgans2vlad@aws-0-us-west-1.pooler.supabase.com:5432/postgres
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - NODE_ENV=development
      - CHOKIDAR_INTERVAL=300
    # depends_on:
    #   - db
    volumes:
      - ./src:/app/src # Mount src directory for hot reload
      - ./public:/app/public # Mount public directory for hot reload
      - ./package.json:/app/package.json # Mount package.json
      - ./package-lock.json:/app/package-lock.json # Mount package-lock.json
      - ./tailwind.config.ts:/app/tailwind.config.ts # Mount tailwind.config.ts
      - ./src/app/globals.css:/app/src/app/globals.css # Mount globals.css
      - ./tsconfig.json:/app/tsconfig.json # Mount tsconfig.json
      - ./prisma:/app/prisma # Mount prisma
      - ./node_modules:/app/node_modules
      - ./.env:/app/.env
    restart: unless-stopped
    networks:
      - web-network
    command: sh -c "npm rebuild && npm run dev"

  # db:
  #   image: postgres:17
  #   environment:
  #     POSTGRES_USER: myuser
  #     POSTGRES_PASSWORD: mypassword
  #     POSTGRES_DB: mydb
  #   ports:
  #     - '5433:5432'
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - web-network

networks:
  web-network:
    driver: bridge

# volumes:
#   postgres-data:
</file>

<file path="docker-compose.proxy.prod.yml">
version: '3.3'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.proxy
      args:
        - HTTP_PROXY=http://172.16.2.254:3128
        - HTTPS_PROXY=http://172.16.2.254:3128
    ports:
      - '3000:3000'
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://postgres.tdzryocudlllmufiiaki:KentHD720pgans2vlad@aws-0-us-west-1.pooler.supabase.com:5432/postgres
      - HTTP_PROXY=http://172.16.2.254:3128
      - HTTPS_PROXY=http://172.16.2.254:3128
      - NO_PROXY=localhost,127.0.0.1,.docker.internal
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CHOKIDAR_INTERVAL=300
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
    # depends_on:
    #   - db
    volumes:
      - ./src:/app/src # Mount src directory for hot reload
      - ./public:/app/public # Mount public directory for hot reload
      - ./package.json:/app/package.json # Mount package.json
      - ./package-lock.json:/app/package-lock.json # Mount package-lock.json
      - ./tailwind.config.ts:/app/tailwind.config.ts # Mount tailwind.config.ts
      - ./src/app/globals.css:/app/src/app/globals.css # Mount globals.css
      - ./tsconfig.json:/app/tsconfig.json # Mount tsconfig.json
      - ./prisma:/app/prisma # Mount prisma
      # - ./node_modules:/app/node_modules
      - ./.env:/app/.env
    restart: unless-stopped
    networks:
      - web-network
    command: sh -c "npm rebuild && npm run dev"

  # db:
  #   image: postgres:17
  #   environment:
  #     POSTGRES_USER: myuser
  #     POSTGRES_PASSWORD: mypassword
  #     POSTGRES_DB: mydb
  #   ports:
  #     - '5433:5432'
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - web-network

networks:
  web-network:
    driver: bridge

# volumes:
#   postgres-data:
</file>

<file path="docker-compose.proxy.yml">
version: '3.3'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.proxy
      args:
        - HTTP_PROXY=http://172.16.2.254:3128
        - HTTPS_PROXY=http://172.16.2.254:3128
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - HTTP_PROXY=http://172.16.2.254:3128
      - HTTPS_PROXY=http://172.16.2.254:3128
      - DATABASE_URL=postgresql://myuser:mypassword@db:5432/mydb
      - CHOKIDAR_INTERVAL=300
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
    depends_on:
      - db
    volumes:
      - ./src:/app/src  # Mount src directory for hot reload
      - ./public:/app/public  # Mount public directory for hot reload
      - ./package.json:/app/package.json  # Mount package.json
      - ./package-lock.json:/app/package-lock.json  # Mount package-lock.json
      - ./tailwind.config.ts:/app/tailwind.config.ts  # Mount tailwind.config.ts
      - ./src/app/globals.css:/app/src/app/globals.css  # Mount globals.css
      - ./tsconfig.json:/app/tsconfig.json  # Mount tsconfig.json
      - ./prisma:/app/prisma  # Mount prisma
      - ./node_modules:/app/node_modules
      - ./.env:/app/.env
    networks:
      - web-network

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5433:5432" 
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - web-network


networks:
  web-network:
    driver: bridge

volumes:
  postgres-data:
</file>

<file path="Dockerfile.mac">
# Dockerfile.mac
FROM node:20.11-alpine3.19

# 1) Install psql (PostgreSQL client)
RUN apk add --no-cache postgresql-client

# 2) Set workdir and install app deps
WORKDIR /app
COPY package*.json ./
RUN npm install

# 3) Copy the rest of your code and generate Prisma client
COPY . .
RUN npx prisma generate

EXPOSE 3000
CMD ["npm", "run", "dev"]
</file>

<file path="Dockerfile.proxy">
FROM node:20.11-bullseye
ARG HTTP_PROXY
ARG HTTPS_PROXY

ENV HTTP_PROXY=${HTTP_PROXY}
ENV HTTPS_PROXY=${HTTPS_PROXY}

ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTPS_PROXY}

ENV NO_PROXY=localhost,127.0.0.1,.docker.internal,supabase.com,dl-cdn.alpinelinux.org
WORKDIR /app

RUN if [ -n "${HTTP_PROXY}" ]; then \
      npm config set proxy ${HTTP_PROXY} && \
      npm config set https-proxy ${HTTPS_PROXY} && \
      { echo "proxy=${HTTP_PROXY}"; \
        echo "http-proxy=${HTTP_PROXY}"; \
        echo "https-proxy=${HTTPS_PROXY}"; } > /root/.curlrc; \
    fi

RUN if [ -z "${HTTP_PROXY}" ]; then \
      apt-get update && apt-get install -y curl ca-certificates; \
    else \
      http_proxy=${HTTP_PROXY} https_proxy=${HTTPS_PROXY} \
      apt-get update && apt-get install -y curl ca-certificates; \
    fi

RUN echo "precedence ::ffff:0:0/96 100" > /etc/gai.conf

COPY package*.json ./

# Install dependencies with proxy support
RUN if [ -n "${HTTP_PROXY}" ]; then \
      npm config set proxy ${HTTP_PROXY} && \
      npm config set https-proxy ${HTTPS_PROXY} && \
      npm config set strict-ssl false; \
    fi && \
    npm install --verbose

COPY . .

RUN npx prisma generate

EXPOSE 3000

CMD ["npm", "run", "dev"]
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="jest.setup.mjs">
import fetch, { Request, Response, Headers } from 'node-fetch';
import '@testing-library/jest-dom';
import { TextEncoder, TextDecoder } from 'util';
import '@testing-library/jest-dom';


// Polyfill TextEncoder and TextDecoder for Next.js request parsing in Node.
globalThis.TextEncoder = TextEncoder;
globalThis.TextDecoder = TextDecoder;
globalThis.Headers = Headers;
globalThis.Request = Request;
globalThis.Response = Response;
globalThis.fetch = fetch;

process.env.NEXT_PUBLIC_SUPABASE_URL = 'mock-url';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'mock-key';

globalThis.IS_REACT_ACT_ENVIRONMENT = true;

if (!globalThis.Request) {
  globalThis.Request = Request;
  globalThis.Response = Response;
  globalThis.Headers = Headers;
  globalThis.fetch = fetch;
}
</file>

<file path="next.config copy.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  serverActions: {
    bodySizeLimit: '5mb', // Increase the limit (e.g., to 5MB or adjust as needed)
  },
  env: {
    // Properly configure base URL for all environments
    NEXT_PUBLIC_BASE_URL: process.env.VERCEL_URL
      ? `https://${process.env.VERCEL_URL}`
      : process.env.NEXT_PUBLIC_BASE_URL || 'https://lessay-app.vercel.app',
  },
  experimental: {
    // Performance optimizations
    turbo: {
      rules: {
        "*.png": ["file-loader"],
        "*.jpg": ["file-loader"],
        "*.svg": ["file-loader"],
      },
      resolveAlias: {
        // Add module aliases for better tree-shaking
        '@': './src',
      },
    },
    // Enable optimizations
    optimizePackageImports: ['@/components'],
    // Enable next-sitemap integration
    nextScriptWorkers: true,
  },
 
  reactStrictMode: true,
  compress: true,        // Enable compression
  poweredByHeader: false, // Remove X-Powered-By header
  generateEtags: true,   // Generate ETags for caching
  productionBrowserSourceMaps: false, // Disable source maps in production
  
  // Cache and performance
  onDemandEntries: {
    maxInactiveAge: 60 * 60 * 1000, // 1 hour
    pagesBufferLength: 5,
  },
  
  // Asset optimization
  images: {
    domains: [
      new URL(process.env.NEXT_PUBLIC_BASE_URL || 'https://lessay-app.vercel.app').hostname
    ],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
  },
  
  // Output optimization
  output: 'standalone',
};

export default nextConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="todo.md">
**TODO #5:**
Objective: Define the `User` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `User` model. This model will store application-specific user details and link to Supabase Auth users.
    ```prisma
    model User {
      id                 String    @id @default(cuid())
      supabaseAuthUserId String?   @unique // Stores the UUID from Supabase Auth. Make nullable if user records can exist before linking.
      name               String
      email              String    @unique
      username           String?   @unique // Will be used for public profile URLs
      role               String    @default("trainer") // e.g., "trainer", "admin"
      emailVerifiedAt    DateTime?

      profile            Profile?  // One-to-one relation to Profile
      clients            Client[]  // One-to-many relation: A trainer has many clients

      createdAt          DateTime  @default(now())
      updatedAt          DateTime  @updatedAt
    }
    ```
Expected Outcome: The `User` model is correctly defined in `prisma/schema.prisma` with specified fields and relations placeholder.
Best Practice Reminders: Use Prisma conventions (camelCase for fields). `cuid()` is a good default for IDs.

**TODO #6:**
Objective: Define the `Profile` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `Profile` model, linking it to the `User` model.
    ```prisma
    model Profile {
      id                 String    @id @default(cuid())
      userId             String    @unique // Foreign key to User model
      user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

      certifications     String?
      location           String?
      phone              String?
      aboutMe            String?   @db.Text // For longer text
      philosophy         String?   @db.Text
      methodology        String?   @db.Text
      bannerImagePath    String?
      profilePhotoPath   String?

      services           Service[]
      testimonials       Testimonial[]
      transformationPhotos TransformationPhoto[]
      externalLinks      ExternalLink[]
      benefits           Benefit[]

      createdAt          DateTime  @default(now())
      updatedAt          DateTime  @updatedAt
    }
    ```
Expected Outcome: The `Profile` model is correctly defined in `prisma/schema.prisma` with its fields and relations.
Best Practice Reminders: `onDelete: Cascade` for `user` relation ensures profiles are deleted if the user is deleted. Use `@db.Text` for potentially long string fields.

**TODO #7:**
Objective: Define the `Service` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `Service` model, linking it to the `Profile` model.
    ```prisma
    model Service {
      id          String   @id @default(cuid())
      profileId   String   // Foreign key to Profile model
      profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

      title       String
      description String   @db.Text

      createdAt   DateTime @default(now())
      updatedAt   DateTime @updatedAt
    }
    ```
Expected Outcome: The `Service` model is correctly defined.
Best Practice Reminders: `onDelete: Cascade` ensures services are deleted if the parent profile is deleted.

**TODO #8:**
Objective: Define the `Testimonial` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `Testimonial` model, linking it to the `Profile` model.
    ```prisma
    model Testimonial {
      id               String   @id @default(cuid())
      profileId        String   // Foreign key to Profile model
      profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

      clientName       String
      testimonialText  String   @db.Text

      createdAt        DateTime @default(now())
      updatedAt        DateTime @updatedAt
    }
    ```
Expected Outcome: The `Testimonial` model is correctly defined.

**TODO #9:**
Objective: Define the `TransformationPhoto` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `TransformationPhoto` model, linking it to the `Profile` model.
    ```prisma
    model TransformationPhoto {
      id          String   @id @default(cuid())
      profileId   String   // Foreign key to Profile model
      profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

      imagePath   String   // Path to the image file (e.g., in Supabase Storage)
      caption     String?

      createdAt   DateTime @default(now())
      updatedAt   DateTime @updatedAt
    }
    ```
Expected Outcome: The `TransformationPhoto` model is correctly defined.

**TODO #10:**
Objective: Define the `ExternalLink` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `ExternalLink` model, linking it to the `Profile` model.
    ```prisma
    model ExternalLink {
      id        String   @id @default(cuid())
      profileId String   // Foreign key to Profile model
      profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

      linkUrl   String
      label     String

      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }
    ```
Expected Outcome: The `ExternalLink` model is correctly defined.

**TODO #11:**
Objective: Define the `Benefit` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `Benefit` model, linking it to the `Profile` model.
    ```prisma
    model Benefit {
      id             String   @id @default(cuid())
      profileId      String   // Foreign key to Profile model
      profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

      iconName       String?  // Name of the icon (e.g., from an icon library)
      iconStyle      String?  @default("outline") // e.g., 'outline', 'solid'
      title          String
      description    String?  @db.Text
      orderColumn    Int      @default(0) // For ordering benefits

      createdAt      DateTime @default(now())
      updatedAt      DateTime @updatedAt
    }
    ```
Expected Outcome: The `Benefit` model is correctly defined.

**TODO #12:**
Objective: Define the `Client` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `Client` model, linking it to the `User` model (the trainer).
    ```prisma
    model Client {
      id                      String    @id @default(cuid())
      trainerId               String    // Foreign key to User model (trainer)
      trainer                 User      @relation(fields: [trainerId], references: [id], onDelete: Cascade) // 'trainer' is the User

      name                    String
      email                   String?   // Email of the client, can be unique per trainer
      phone                   String?
      status                  String    @default("active") // e.g., "active", "inactive", "lead"
      dateOfBirth             DateTime? @db.Date
      goals                   String?   @db.Text
      healthNotes             String?   @db.Text
      emergencyContactName    String?
      emergencyContactPhone   String?

      measurements            ClientMeasurement[]
      progressPhotos          ClientProgressPhoto[]
      sessionLogs             ClientSessionLog[]

      createdAt               DateTime  @default(now())
      updatedAt               DateTime  @updatedAt

      @@unique([trainerId, email]) // Client email should be unique per trainer
    }
    ```
Expected Outcome: The `Client` model is correctly defined.
Best Practice Reminders: Consider if client email should be globally unique or unique per trainer. `@@unique([trainerId, email])` implements per-trainer uniqueness.

**TODO #13:**
Objective: Define the `ClientMeasurement` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `ClientMeasurement` model.
    ```prisma
    model ClientMeasurement {
      id                 String    @id @default(cuid())
      clientId           String
      client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

      measurementDate    DateTime  @db.Date
      weightKg           Float?
      bodyFatPercentage  Float?
      notes              String?   @db.Text
      customMetrics      Json?     // To store array of {name: string, value: string}

      createdAt          DateTime  @default(now())
      updatedAt          DateTime  @updatedAt
    }
    ```
Expected Outcome: The `ClientMeasurement` model is correctly defined.
Best Practice Reminders: `Json?` type for `customMetrics` allows flexibility.

**TODO #14:**
Objective: Define the `ClientProgressPhoto` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `ClientProgressPhoto` model.
    ```prisma
    model ClientProgressPhoto {
      id         String   @id @default(cuid())
      clientId   String
      client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

      photoDate  DateTime @db.Date
      imagePath  String   // Path to the image file
      caption    String?

      createdAt  DateTime @default(now())
      updatedAt  DateTime @updatedAt
    }
    ```
Expected Outcome: The `ClientProgressPhoto` model is correctly defined.

**TODO #15:**
Objective: Define the `ClientSessionLog` model in the Prisma schema.
File(s) To Create/Modify: `prisma/schema.prisma`.
Specific Instructions:
1.  Open `prisma/schema.prisma`.
2.  Define the `ClientSessionLog` model.
    ```prisma
    model ClientSessionLog {
      id                  String    @id @default(cuid())
      clientId            String
      client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

      sessionDate         DateTime
      durationMinutes     Int?
      activitySummary     String?
      sessionNotes        String?   @db.Text
      clientMoodFeedback  String?   // e.g., "energized", "tired"

      createdAt           DateTime  @default(now())
      updatedAt           DateTime  @updatedAt
    }
    ```
Expected Outcome: The `ClientSessionLog` model is correctly defined.

**TODO #16:**
Objective: Generate and apply database migrations using Prisma.
File(s) To Create/Modify: Creates migration files in `prisma/migrations`.
Specific Instructions:
1.  Run the Prisma migrate command to generate SQL migrations from your schema and apply them to the Supabase database:
    ```bash
    npx prisma migrate dev --name initial-schema
    ```
2.  Inspect the generated migration file in `prisma/migrations/...` to ensure it matches expectations.
3.  Confirm that the tables are created in your Supabase database (via Supabase Studio Table Editor).
Expected Outcome: Database schema is created in Supabase, matching the Prisma models. Migration files are generated.
Best Practice Reminders: Always review auto-generated migrations.

**TODO #17:**
Objective: Generate Prisma Client.
File(s) To Create/Modify: Updates `node_modules/@prisma/client`.
Specific Instructions:
1.  Prisma Client is usually generated automatically after `prisma migrate dev`. If not, or to regenerate:
    ```bash
    npx prisma generate
    ```
Expected Outcome: Prisma Client is generated/updated, allowing programmatic access to the database schema.
Best Practice Reminders: Prisma Client should be regenerated whenever the `schema.prisma` file changes.

**TODO #18:**
Objective: Create a Prisma Client singleton instance for use throughout the application.
File(s) To Create/Modify: `lib/prisma.ts` (or a similar path like `src/lib/prisma.ts`).
Specific Instructions:
1.  Create a new file, e.g., `src/lib/prisma.ts`.
2.  Implement the Prisma Client singleton pattern to avoid creating too many connections in a serverless environment.
    ```typescript
    // src/lib/prisma.ts
    import { PrismaClient } from '@prisma/client';

    declare global {
      // allow global `var` declarations
      // eslint-disable-next-line no-unused-vars
      var prisma: PrismaClient | undefined;
    }

    export const prisma =
      global.prisma ||
      new PrismaClient({
        // Optional: log: ['query', 'info', 'warn', 'error'],
      });

    if (process.env.NODE_ENV !== 'production') global.prisma = prisma;

    export default prisma;
    ```
Expected Outcome: A reusable Prisma Client instance is available for database operations.
Best Practice Reminders: This pattern prevents exhausting database connections, especially in development with Next.js hot reloading.

---

This concludes the initial setup and data modeling phase. Please confirm when @roo has completed TODO #1, and I will proceed with the next set of tasks.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/src/generated/prisma
</file>

<file path="docker-compose.mac.yml">
version: '3.3'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile.mac
    ports:
      - "3000:3000"
    env_file:
      - .env.local
    environment:
      - DATABASE_URL=postgresql://myuser:mypassword@db:5432/mydb
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
      - NODE_ENV=development
      - CHOKIDAR_INTERVAL=300
    depends_on:
      - db
    volumes:
      - ./src:/app/src  # Mount src directory for hot reload
      - ./public:/app/public  # Mount public directory for hot reload
      - ./package.json:/app/package.json  # Mount package.json
      - ./package-lock.json:/app/package-lock.json  # Mount package-lock.json
      - ./tailwind.config.ts:/app/tailwind.config.ts  # Mount tailwind.config.ts
      - ./src/app/globals.css:/app/src/app/globals.css  # Mount globals.css
      - ./tsconfig.json:/app/tsconfig.json  # Mount tsconfig.json
      - ./prisma:/app/prisma  # Mount prisma
      - ./node_modules:/app/node_modules
      - ./.env:/app/.env
    restart: unless-stopped
    networks:
      - web-network
    command: sh -c "npm rebuild && npm run dev"

  db:
    image: postgres:17
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5433:5432" 
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - web-network


networks:
  web-network:
    driver: bridge

volumes:
  postgres-data:
</file>

<file path="package.json">
{
  "name": "zirofit-next",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@prisma/client": "^6.9.0",
    "next": "15.3.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "prisma": "^6.9.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  supabaseAuthUserId String?   @unique // Stores the UUID from Supabase Auth. Make nullable if user records can exist before linking.
  name               String
  email              String    @unique
  username           String?   @unique // Will be used for public profile URLs
  role               String    @default("trainer") // e.g., "trainer", "admin"
  emailVerifiedAt    DateTime?

  profile            Profile?  // One-to-one relation to Profile
  clients            Client[]  // One-to-many relation: A trainer has many clients

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique // Foreign key to User model
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  certifications     String?
  location           String?
  phone              String?
  aboutMe            String?   @db.Text // For longer text
  philosophy         String?   @db.Text
  methodology        String?   @db.Text
  bannerImagePath    String?
  profilePhotoPath   String?

  services           Service[]
  testimonials       Testimonial[]
  transformationPhotos TransformationPhoto[]
  externalLinks      ExternalLink[]
  benefits           Benefit[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title       String
  description String   @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id               String   @id @default(cuid())
  profileId        String   // Foreign key to Profile model
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  clientName       String
  testimonialText  String   @db.Text

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TransformationPhoto {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  imagePath   String   // Path to the image file (e.g., in Supabase Storage)
  caption     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExternalLink {
  id        String   @id @default(cuid())
  profileId String   // Foreign key to Profile model
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  linkUrl   String
  label     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Benefit {
  id             String   @id @default(cuid())
  profileId      String   // Foreign key to Profile model
  profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  iconName       String?  // Name of the icon (e.g., from an icon library)
  iconStyle      String?  @default("outline") // e.g., 'outline', 'solid'
  title          String
  description    String?  @db.Text
  orderColumn    Int      @default(0) // For ordering benefits

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Client {
  id                      String    @id @default(cuid())
  trainerId               String    // Foreign key to User model (trainer)
  trainer                 User      @relation(fields: [trainerId], references: [id], onDelete: Cascade) // 'trainer' is the User

  name                    String
  email                   String?   // Email of the client, can be unique per trainer
  phone                   String?
  status                  String    @default("active") // e.g., "active", "inactive", "lead"
  dateOfBirth             DateTime? @db.Date
  goals                   String?   @db.Text
  healthNotes             String?   @db.Text
  emergencyContactName    String?
  emergencyContactPhone   String?

  measurements            ClientMeasurement[]
  progressPhotos          ClientProgressPhoto[]
  sessionLogs             ClientSessionLog[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@unique([trainerId, email]) // Client email should be unique per trainer
}

model ClientMeasurement {
  id                 String    @id @default(cuid())
  clientId           String
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  measurementDate    DateTime  @db.Date
  weightKg           Float?
  bodyFatPercentage  Float?
  notes              String?   @db.Text
  customMetrics      Json?     // To store array of {name: string, value: string}

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ClientProgressPhoto {
  id         String   @id @default(cuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  photoDate  DateTime @db.Date
  imagePath  String   // Path to the image file
  caption    String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ClientSessionLog {
  id                  String    @id @default(cuid())
  clientId            String
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sessionDate         DateTime
  durationMinutes     Int?
  activitySummary     String?
  sessionNotes        String?   @db.Text
  clientMoodFeedback  String?   // e.g., "energized", "tired"

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
</file>

</files>
