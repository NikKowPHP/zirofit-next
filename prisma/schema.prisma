
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @unique // Use Supabase Auth UUID as the primary key
  name               String
  email              String    @unique
  username           String?   @unique // Will be used for public profile URLs
  role               String // e.g., "trainer", "admin"
  emailVerifiedAt    DateTime?

  profile            Profile?  // One-to-one relation to Profile
  clients            Client[]  @relation("TrainerClients") // One-to-many relation: A trainer has many clients
  notifications      Notification[]
  bookings           Booking[] // Relation to bookings made with this trainer
  selfManagedClient  Client?   @relation("ClientUser")

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique // Foreign key to User model
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  certifications     String?
  location           String?
  phone              String?
  aboutMe            String?   @db.Text // For longer text
  philosophy         String?   @db.Text
  methodology        String?   @db.Text
  bannerImagePath    String?
  profilePhotoPath   String?

  services           Service[]
  testimonials       Testimonial[]
  transformationPhotos TransformationPhoto[]
  externalLinks      ExternalLink[]
  benefits           Benefit[]
  socialLinks        SocialLink[]
  availability       Json?     // e.g., { "mon": ["09:00-17:00"], "tue": ["..."] }

  locationNormalized String?   @db.Text
  latitude           Float?
  longitude          Float?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title       String
  description String   @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id               String   @id @default(cuid())
  profileId        String   // Foreign key to Profile model
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  clientName       String
  testimonialText  String   @db.Text

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TransformationPhoto {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  imagePath   String   // Path to the image file (e.g., in Supabase Storage)
  caption     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialLink {
  id          String   @id @default(cuid())
  profileId   String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  platform    String
  username    String
  profileUrl  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExternalLink {
  id        String   @id @default(cuid())
  profileId String   // Foreign key to Profile model
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  linkUrl   String
  label     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Benefit {
  id             String   @id @default(cuid())
  profileId      String   // Foreign key to Profile model
  profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  iconName       String?  // Name of the icon (e.g., from an icon library)
  iconStyle      String?  @default("outline") // e.g., 'outline', 'solid'
  title          String
  description    String?  @db.Text
  orderColumn    Int      @default(0) // For ordering benefits

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Client {
  id                      String    @id @default(cuid())
  trainerId               String?   // Foreign key to User model (trainer)
  trainer                 User?     @relation("TrainerClients", fields: [trainerId], references: [id], onDelete: Cascade) // 'trainer' is the User
  userId                  String?   @unique // Link to a user account if the client is a user
  user                    User?     @relation("ClientUser", fields: [userId], references: [id], onDelete: SetNull)

  name                    String
  email                   String?   // Email of the client, can be unique per trainer
  phone                   String?
  status                  String    @default("active") // e.g., "active", "inactive", "lead"
  dateOfBirth             DateTime? @db.Date
  goals                   String?   @db.Text
  healthNotes             String?   @db.Text
  emergencyContactName    String?
  emergencyContactPhone   String?

  measurements            ClientMeasurement[]
  progressPhotos          ClientProgressPhoto[]
  sessionLogs             ClientSessionLog[]
  exerciseLogs            ClientExerciseLog[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model ClientMeasurement {
  id                 String    @id @default(cuid())
  clientId           String
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  measurementDate    DateTime  @db.Date
  weightKg           Float?
  bodyFatPercentage  Float?
  notes              String?   @db.Text
  customMetrics      Json?     // To store array of {name: string, value: string}

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ClientProgressPhoto {
  id         String   @id @default(cuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  photoDate  DateTime @db.Date
  imagePath  String   // Path to the image file
  caption    String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ClientSessionLog {
  id                  String    @id @default(cuid())
  clientId            String
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sessionDate         DateTime
  durationMinutes     Int?
  activitySummary     String?
  sessionNotes        String?   @db.Text
  clientMoodFeedback  String?   // e.g., "energized", "tired"

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  message     String
  type        String   // e.g., "milestone", "system", "reminder"
  readStatus  Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      String   @default("CONFIRMED") // e.g., CONFIRMED, CANCELLED

  trainerId   String
  trainer     User     @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  // Details of the person who booked, not a formal client record yet
  clientName  String
  clientEmail String
  clientNotes String?  @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([trainerId, startTime, endTime])
}

model Exercise {
  id          String              @id @default(cuid())
  name        String              @unique
  muscleGroup String?
  equipment   String?
  description String?             @db.Text
  logs        ClientExerciseLog[]

  @@index([name])
}

model ClientExerciseLog {
  id         String   @id @default(cuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  logDate    DateTime @db.Date
  sets       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([clientId, logDate])
}