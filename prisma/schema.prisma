// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  supabaseAuthUserId String?   @unique // Stores the UUID from Supabase Auth. Make nullable if user records can exist before linking.
  name               String
  email              String    @unique
  username           String?   @unique // Will be used for public profile URLs
  role               String    @default("trainer") // e.g., "trainer", "admin"
  emailVerifiedAt    DateTime?

  profile            Profile?  // One-to-one relation to Profile
  clients            Client[]  // One-to-many relation: A trainer has many clients

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique // Foreign key to User model
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  certifications     String?
  location           String?
  phone              String?
  aboutMe            String?   @db.Text // For longer text
  philosophy         String?   @db.Text
  methodology        String?   @db.Text
  bannerImagePath    String?
  profilePhotoPath   String?

  services           Service[]
  testimonials       Testimonial[]
  transformationPhotos TransformationPhoto[]
  externalLinks      ExternalLink[]
  benefits           Benefit[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title       String
  description String   @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Testimonial {
  id               String   @id @default(cuid())
  profileId        String   // Foreign key to Profile model
  profile          Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  clientName       String
  testimonialText  String   @db.Text

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TransformationPhoto {
  id          String   @id @default(cuid())
  profileId   String   // Foreign key to Profile model
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  imagePath   String   // Path to the image file (e.g., in Supabase Storage)
  caption     String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ExternalLink {
  id        String   @id @default(cuid())
  profileId String   // Foreign key to Profile model
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  linkUrl   String
  label     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Benefit {
  id             String   @id @default(cuid())
  profileId      String   // Foreign key to Profile model
  profile        Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  iconName       String?  // Name of the icon (e.g., from an icon library)
  iconStyle      String?  @default("outline") // e.g., 'outline', 'solid'
  title          String
  description    String?  @db.Text
  orderColumn    Int      @default(0) // For ordering benefits

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Client {
  id                      String    @id @default(cuid())
  trainerId               String    // Foreign key to User model (trainer)
  trainer                 User      @relation(fields: [trainerId], references: [id], onDelete: Cascade) // 'trainer' is the User

  name                    String
  email                   String?   // Email of the client, can be unique per trainer
  phone                   String?
  status                  String    @default("active") // e.g., "active", "inactive", "lead"
  dateOfBirth             DateTime? @db.Date
  goals                   String?   @db.Text
  healthNotes             String?   @db.Text
  emergencyContactName    String?
  emergencyContactPhone   String?

  measurements            ClientMeasurement[]
  progressPhotos          ClientProgressPhoto[]
  sessionLogs             ClientSessionLog[]

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@unique([trainerId, email]) // Client email should be unique per trainer
}

model ClientMeasurement {
  id                 String    @id @default(cuid())
  clientId           String
  client             Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  measurementDate    DateTime  @db.Date
  weightKg           Float?
  bodyFatPercentage  Float?
  notes              String?   @db.Text
  customMetrics      Json?     // To store array of {name: string, value: string}

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ClientProgressPhoto {
  id         String   @id @default(cuid())
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  photoDate  DateTime @db.Date
  imagePath  String   // Path to the image file
  caption    String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ClientSessionLog {
  id                  String    @id @default(cuid())
  clientId            String
  client              Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  sessionDate         DateTime
  durationMinutes     Int?
  activitySummary     String?
  sessionNotes        String?   @db.Text
  clientMoodFeedback  String?   // e.g., "energized", "tired"

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
